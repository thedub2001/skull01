ðŸ“‚ src
 â”œâ”€â”€ main.tsx
 â”‚    - Point d'entrÃ©e React.
 â”‚    - Monte <App /> dans le DOM, emballÃ© dans <SettingsProvider>.
 â”‚
 â”œâ”€â”€ App.tsx
 â”‚    - Composition principale :
 â”‚       â€¢ Initialise hooks data (nodes, links, visualLinks, selection).
 â”‚       â€¢ Branche camÃ©ra (useCameraTracker) et labels (useLabelSprite).
 â”‚       â€¢ Fetch initial (useGraphInitialFetch).
 â”‚       â€¢ Rend :
 â”‚          - <SettingsPanel>
 â”‚          - <GraphWrapper>
 â”‚          - <InfoPanel>
 â”‚
 â”œâ”€â”€ context/
 â”‚    â””â”€â”€ SettingsContext.tsx
 â”‚         - Contexte global pour rÃ©glages UI + dbMode.
 â”‚         - Expose pushLocalToRemote / pullRemoteToLocal.
 â”‚
 â”œâ”€â”€ hooks/
 â”‚    â”œâ”€â”€ useNodes.ts              â†’ CRUD + fetch nodes (local/remote/sync)
 â”‚    â”œâ”€â”€ useLinks.ts              â†’ CRUD + fetch links
 â”‚    â”œâ”€â”€ useVisualLinks.ts        â†’ CRUD + fetch visual links
 â”‚    â”œâ”€â”€ useGraphSelection.ts     â†’ SÃ©lection nÅ“uds/liens + handlers
 â”‚    â”œâ”€â”€ useLabelSprite.tsx       â†’ GÃ©nÃ¨re THREE.Sprite label 3D en fonction de la distance camÃ©ra/noeud
 â”‚    â”œâ”€â”€ useGraphDataSync.ts      â†’ Maintient {nodes, links} cohÃ©rent pour FG3D
 â”‚    â”œâ”€â”€ useGraphInitialFetch.ts  â†’ Lance fetch initial (nodes, links, vlinks)
 â”‚    â”œâ”€â”€ useCameraTracker.ts      â†’ Suit position camÃ©ra (state x,y,z)
 â”‚    â”œâ”€â”€ useNodeLabelGenerator.ts â†’ Fabrique canvas text pour labels 3D
 â”‚    â””â”€â”€ useVisualLinksRenderer.ts
 â”‚         - Injecte visuellement les visualLinks (addDynamicVisualLinks)
 â”‚         - Anime leur position (updateVisualLinks)
 â”‚
 â”œâ”€â”€ components/
 â”‚    â”œâ”€â”€ GraphWrapper.tsx
 â”‚    â”‚    - Encapsule <ForceGraph3D>.
 â”‚    â”‚    - Rend nodes/links filtrÃ©s par type.
 â”‚    â”‚    - Applique nodeThreeObject (labels sprites).
 â”‚    â”‚    - Branche sÃ©lection nodes/liens.
 â”‚    â”‚    - Rend visualLinks (useVisualLinksRenderer).
 â”‚    â”‚
 â”‚    â”œâ”€â”€ SettingsPanel.tsx
 â”‚    â”‚    - Panneau latÃ©ral gauche (toggleable).
 â”‚    â”‚    - ContrÃ´le : hueStep, showLabels, filtres de lien, dbMode.
 â”‚    â”‚    - Boutons Push Localâ†’Remote / Pull Remoteâ†’Local.
 â”‚    â”‚
 â”‚    â””â”€â”€ InfoPanel.tsx
 â”‚         - Panneau latÃ©ral droit affichant dÃ©tails des sÃ©lections.
 â”‚         - Affiche info des nÅ“uds sÃ©lectionnÃ©s (id, label, type, niveau).
 â”‚         - Boutons actions (crÃ©er enfant, supprimer).
 â”‚         - Affiche info des liens sÃ©lectionnÃ©s (source, target, type).
 â”‚
 â”œâ”€â”€ utils/
 â”‚    â”œâ”€â”€ nodeHandlers.ts
 â”‚    â”‚    - deleteNodeHandler : supprime node + liens associÃ©s.
 â”‚    â”‚    - deleteNodeRecursive : supprime node + descendance.
 â”‚    â”‚    - addChildNodeHandler : crÃ©e un enfant + lien parent-child.
 â”‚    â”‚
 â”‚    â””â”€â”€ addDynamicVisualLinks.ts (appelÃ© mais pas encore montrÃ©)
 â”‚         - addDynamicVisualLinks / updateVisualLinks
 â”‚         - GÃ¨re rendu dynamique des visualLinks.
 â”‚
 â”œâ”€â”€ types/
 â”‚    â”œâ”€â”€ graph.ts
 â”‚    â”‚    - DÃ©finit DBNode, DBLink, NodeType, LinkType.
 â”‚    â””â”€â”€ VisualLinkType.ts
 â”‚         - DÃ©finit structure dâ€™un VisualLink (id, source, target, type, metadata).
 â”‚
 â”œâ”€â”€ db/
 â”‚    â”œâ”€â”€ adapter.ts
 â”‚    â”‚    - switch between DbMode = "local" | "remote" | "sync";
 â”‚    â”‚
 â”‚    â”œâ”€â”€ localDB.ts
 â”‚    â”‚    - IndexedDB (idb).
 â”‚    â”‚    - Stores : nodes, links, visual_links.
 â”‚    â”‚    - CRUD gÃ©nÃ©riques, import/export JSON.
 â”‚    â”‚
 â”‚    â”œâ”€â”€ remoteDB.ts
 â”‚    â”‚    - Supabase.
 â”‚    â”‚    - fetchNodes/Links/VisualLinks.
 â”‚    â”‚    - CRUD nodes, links, visualLinks.
 â”‚    â”‚
 â”‚    â””â”€â”€ sync.ts
 â”‚         - pushLocalToRemote : purge remote puis copie local.
 â”‚         - pullRemoteToLocal : purge local puis copie remote.
 â”‚         - initRealtimeSync : placeholder.
 â”‚
 â””â”€â”€ lib/
      â””â”€â”€ supabase.ts (client supabase)
